name: Build and Test

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build macOS binary
        run: |
          chmod +x ./build-macos.sh
          ./build-macos.sh

      - name: Test macOS binary
        run: |
          ./target/release/port-kill --help
          ./target/release/port-kill-console --help

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libatk1.0-dev libgdk-pixbuf2.0-dev libgtk-3-dev libxdo-dev pkg-config

      - name: Build Linux binary
        run: |
          chmod +x ./build-linux.sh
          ./build-linux.sh

      - name: Test Linux binary
        run: |
          ./target/release/port-kill --help
          ./target/release/port-kill-console --help

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Windows binary
        run: |
          # Enable detailed logging
          $env:RUST_LOG = "debug"
          $env:RUST_BACKTRACE = "1"
          
          # Show environment info
          Write-Host "=== Environment Info ==="
          Write-Host "Rust version: $(rustc --version)"
          Write-Host "Cargo version: $(cargo --version)"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in current directory:"
          Get-ChildItem | ForEach-Object { Write-Host "  $_" }
          
          # Try to build console binary first (should work on all platforms)
          Write-Host "=== Building console binary ==="
          
          # Create a standalone console binary (no library dependencies)
          Write-Host "=== Creating standalone console binary ==="
          
          # Create a temporary directory for console build
          New-Item -ItemType Directory -Path "console-build" -Force | Out-Null
          Copy-Item "src/main_console.rs" "console-build/main.rs"
          Copy-Item "src/console_app.rs" "console-build/console_app.rs"
          Copy-Item "src/process_monitor.rs" "console-build/process_monitor.rs"
          Copy-Item "src/types.rs" "console-build/types.rs"
          Copy-Item "src/cli.rs" "console-build/cli.rs"
          
          # Create standalone Cargo.toml for console
          @"
          [package]
          name = "port-kill-console-standalone"
          version = "0.1.0"
          edition = "2021"

          [[bin]]
          name = "port-kill-console"
          path = "main.rs"

          [dependencies]
          crossbeam-channel = "0.5"
          tokio = { version = "1.0", features = ["full"] }
          serde = { version = "1.0", features = ["derive"] }
          serde_json = "1.0"
          anyhow = "1.0"
          thiserror = "1.0"
          log = "0.4"
          env_logger = "0.10"
          clap = { version = "4.0", features = ["derive"] }
          "@ | Out-File -FilePath "console-build/Cargo.toml" -Encoding utf8

          # Build in the temporary directory
          Push-Location "console-build"

          # Build console binary
          Write-Host "=== Building standalone console binary ==="
          $buildResult = cargo build --release --bin port-kill-console --verbose 2>&1
          $buildExitCode = $LASTEXITCODE
          
          Write-Host "Build output:"
          Write-Host $buildResult
          Write-Host "Build exit code: $buildExitCode"
          
          if ($buildExitCode -ne 0) {
            Write-Host "❌ Console binary build failed with exit code $buildExitCode"
            Write-Host "Current directory contents:"
            Get-ChildItem | ForEach-Object { Write-Host "  $_" }
            Write-Host "Target directory contents:"
            Get-ChildItem ".\target\" -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "  $_" }
            exit 1
          }

          # Copy the built binary to the main target directory
          Copy-Item ".\target\release\port-kill-console.exe" "..\target\release\port-kill-console.exe" -Force
          
          # Return to original directory
          Pop-Location
          
          # Clean up temporary directory
          Remove-Item "console-build" -Recurse -Force -ErrorAction SilentlyContinue
          
          # Check if console binary was created
          if (Test-Path ".\target\release\port-kill-console.exe") {
            Write-Host "✅ Console binary created successfully"
          } else {
            Write-Host "❌ Console binary not found"
            Get-ChildItem ".\target\release\" -Name
            exit 1
          }
          
          # Now try to build the Windows-specific binary
          Write-Host "=== Building Windows-specific binary ==="
          
          # Show current Cargo.toml
          Write-Host "Current Cargo.toml:"
          Get-Content "Cargo.toml" | ForEach-Object { Write-Host "  $_" }
          
          # Create a simple Windows-specific Cargo.toml
          @"
          [package]
          name = "port-kill"
          version = "0.1.0"
          edition = "2021"

          [[bin]]
          name = "port-kill"
          path = "src/main_windows.rs"

          [dependencies]
          crossbeam-channel = "0.5"
          tokio = { version = "1.0", features = ["full"] }
          serde = { version = "1.0", features = ["derive"] }
          serde_json = "1.0"
          anyhow = "1.0"
          thiserror = "1.0"
          log = "0.4"
          env_logger = "0.10"
          clap = { version = "4.0", features = ["derive"] }
          tray-item = "0.10.0"
          "@ | Out-File -FilePath "Cargo.windows.toml" -Encoding utf8

          # Create a simple lib.rs
          @"
          pub mod console_app;
          pub mod process_monitor;
          pub mod types;
          pub mod cli;
          "@ | Out-File -FilePath "src/lib.windows.rs" -Encoding utf8

          # Backup and switch
          Copy-Item "Cargo.toml" "Cargo.backup" -ErrorAction SilentlyContinue
          Copy-Item "src/lib.rs" "src/lib.backup" -ErrorAction SilentlyContinue
          Copy-Item "Cargo.windows.toml" "Cargo.toml"
          Copy-Item "src/lib.windows.rs" "src/lib.rs"

          # Build Windows binary
          cargo build --release --bin port-kill

          # Restore
          Copy-Item "Cargo.backup" "Cargo.toml" -ErrorAction SilentlyContinue
          Copy-Item "src/lib.backup" "src/lib.rs" -ErrorAction SilentlyContinue
          
          # Clean up
          Remove-Item "Cargo.windows.toml" -ErrorAction SilentlyContinue
          Remove-Item "src/lib.windows.rs" -ErrorAction SilentlyContinue
          Remove-Item "Cargo.backup" -ErrorAction SilentlyContinue
          Remove-Item "src/lib.backup" -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Test Windows binary
        run: |
          # Check if binaries exist
          if (Test-Path ".\target\release\port-kill.exe") { 
            Write-Host "✅ port-kill.exe found" 
          } else { 
            Write-Host "❌ port-kill.exe NOT found"
            Get-ChildItem ".\target\release\" -Name
            exit 1
          }
          
          if (Test-Path ".\target\release\port-kill-console.exe") { 
            Write-Host "✅ port-kill-console.exe found" 
          } else { 
            Write-Host "❌ port-kill-console.exe NOT found"
            Get-ChildItem ".\target\release\" -Name
            exit 1
          }
          
          # Test the binaries
          Write-Host "Testing port-kill.exe --help..."
          .\target\release\port-kill.exe --help
          
          Write-Host "Testing port-kill-console.exe --help..."
          .\target\release\port-kill-console.exe --help
        shell: pwsh

  test-console-mode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build console binary
        run: |
          # Enable detailed logging
          export RUST_LOG=debug
          export RUST_BACKTRACE=1
          
          # Show environment info
          echo "=== Environment Info ==="
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          echo "=== Building console binary ==="
          cargo build --release --bin port-kill-console --verbose
          
          echo "=== Build completed. Checking binary ==="
          ls -la ./target/release/port-kill-console
          
          # Check binary details
          echo "=== Binary details ==="
          file ./target/release/port-kill-console
          ldd ./target/release/port-kill-console 2>/dev/null || echo "ldd not available"
          
          # Try a simple test first
          echo "=== Testing basic execution ==="
          timeout 5s ./target/release/port-kill-console --version || echo "Version test failed, continuing..."

      - name: Test console mode
        run: |
          # Enable detailed logging
          export RUST_LOG=debug
          export RUST_BACKTRACE=1
          
          # Check if binary exists and is executable
          echo "=== Checking binary existence and permissions ==="
          ls -la ./target/release/port-kill-console
          
          # Check binary type
          echo "Checking binary type..."
          file ./target/release/port-kill-console
          
          # Simple test - just check if binary can be executed
          echo "Testing basic execution..."
          if ./target/release/port-kill-console --version > /dev/null 2>&1; then
            echo "✅ Basic execution test passed"
          else
            echo "❌ Basic execution test failed"
            echo "Trying to get more info..."
            ./target/release/port-kill-console --version
            exit 1
          fi
          
          # Test help command
          echo "Testing --help command..."
          if ./target/release/port-kill-console --help > /dev/null 2>&1; then
            echo "✅ --help command succeeded"
          else
            echo "❌ --help command failed"
            exit 1
          fi
          
          # Test version command
          echo "Testing --version command..."
          if ./target/release/port-kill-console --version > /dev/null 2>&1; then
            echo "✅ --version command succeeded"
          else
            echo "❌ --version command failed"
            exit 1
          fi
          
          echo "Console mode test completed successfully!"
