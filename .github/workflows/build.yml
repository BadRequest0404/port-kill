name: Build and Test

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build macOS binary
        run: |
          chmod +x ./build-macos.sh
          ./build-macos.sh

      - name: Test macOS binary
        run: |
          ./target/release/port-kill --help
          ./target/release/port-kill-console --help

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libatk1.0-dev libgdk-pixbuf2.0-dev libgtk-3-dev libxdo-dev pkg-config

      - name: Build Linux binary
        run: |
          chmod +x ./build-linux.sh
          ./build-linux.sh

      - name: Test Linux binary
        run: |
          ./target/release/port-kill --help
          ./target/release/port-kill-console --help

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Windows binary
        run: |
          # Enable detailed logging
          $env:RUST_LOG = "debug"
          $env:RUST_BACKTRACE = "1"
          
          # Show environment info
          Write-Host "=== Environment Info ==="
          Write-Host "Rust version: $(rustc --version)"
          Write-Host "Cargo version: $(cargo --version)"
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Files in current directory:"
          Get-ChildItem | ForEach-Object { Write-Host "  $_" }
          
          # Build both Windows binaries
          Write-Host "=== Building both Windows binaries ==="
          cargo build --release --verbose
          
          # Check if both binaries were built
          Write-Host "=== Checking built binaries ==="
          if (Test-Path ".\target\release\port-kill.exe") {
            Write-Host "✅ port-kill.exe built successfully"
          } else {
            Write-Host "❌ port-kill.exe NOT found"
              exit 1
          }
          
          if (Test-Path ".\target\release\port-kill-console.exe") {
            Write-Host "✅ port-kill-console.exe built successfully"
          } else {
            Write-Host "❌ port-kill-console.exe NOT found"
            exit 1
          }
        shell: pwsh

      - name: Test Windows binary
        run: |
          # Check if both binaries exist
          if (Test-Path ".\target\release\port-kill.exe") { 
            Write-Host "✅ port-kill.exe found" 
          } else { 
            Write-Host "❌ port-kill.exe NOT found"
            Get-ChildItem ".\target\release\" -Name
            exit 1
          }
          
          if (Test-Path ".\target\release\port-kill-console.exe") { 
            Write-Host "✅ port-kill-console.exe found" 
          } else { 
            Write-Host "❌ port-kill-console.exe NOT found"
            Get-ChildItem ".\target\release\" -Name
            exit 1
          }
          
          # Test both binaries
          Write-Host "Testing port-kill.exe --help..."
          .\target\release\port-kill.exe --help
          
          Write-Host "Testing port-kill-console.exe --help..."
          .\target\release\port-kill-console.exe --help
        shell: pwsh

  test-console-mode:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build console binary
        run: |
          # Enable detailed logging
          export RUST_LOG=debug
          export RUST_BACKTRACE=1
          
          # Show environment info
          echo "=== Environment Info ==="
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          echo "=== Building console binary ==="
          cargo build --release --bin port-kill-console --verbose
          
          echo "=== Build completed. Checking binary ==="
          ls -la ./target/release/port-kill-console
          
          # Check binary details
          echo "=== Binary details ==="
          file ./target/release/port-kill-console
          ldd ./target/release/port-kill-console 2>/dev/null || echo "ldd not available"
          
          # Try a simple test first
          echo "=== Testing basic execution ==="
          timeout 5s ./target/release/port-kill-console --version || echo "Version test failed, continuing..."

      - name: Test console mode
        run: |
          # Enable detailed logging
          export RUST_LOG=debug
          export RUST_BACKTRACE=1
          
          # Check if binary exists and is executable
          echo "=== Checking binary existence and permissions ==="
          ls -la ./target/release/port-kill-console
          
          # Check binary type
          echo "Checking binary type..."
          file ./target/release/port-kill-console
          
          # Simple test - just check if binary can be executed
          echo "Testing basic execution..."
          if ./target/release/port-kill-console --version > /dev/null 2>&1; then
            echo "✅ Basic execution test passed"
          else
            echo "❌ Basic execution test failed"
            echo "Trying to get more info..."
            ./target/release/port-kill-console --version
            exit 1
          fi
          
          # Test help command
          echo "Testing --help command..."
          if ./target/release/port-kill-console --help > /dev/null 2>&1; then
            echo "✅ --help command succeeded"
          else
            echo "❌ --help command failed"
            exit 1
          fi
          
          # Test version command
          echo "Testing --version command..."
          if ./target/release/port-kill-console --version > /dev/null 2>&1; then
            echo "✅ --version command succeeded"
          else
            echo "❌ --version command failed"
            exit 1
          fi
          
          echo "Console mode test completed successfully!"